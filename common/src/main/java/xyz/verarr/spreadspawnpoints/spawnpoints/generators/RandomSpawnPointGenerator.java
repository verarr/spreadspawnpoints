package xyz.verarr.spreadspawnpoints.spawnpoints.generators;

import net.minecraft.nbt.NbtCompound;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.util.math.random.LocalRandom;
import net.minecraft.util.math.random.Random;
import net.minecraft.world.border.WorldBorder;
import org.joml.Vector2i;
import xyz.verarr.spreadspawnpoints.mixin.LocalRandomAccessor;
import xyz.verarr.spreadspawnpoints.spawnpoints.SpawnPointGenerator;

public class RandomSpawnPointGenerator implements SpawnPointGenerator {
    private final Vector2i lowerBounds;
    private final Vector2i upperBounds;
    private final Random random;

    public RandomSpawnPointGenerator(ServerWorld serverWorld) {
        WorldBorder border = serverWorld.getWorldBorder();
        this.lowerBounds = new Vector2i((int) border.getBoundWest(), (int) border.getBoundNorth());
        this.upperBounds = new Vector2i((int) border.getBoundEast(), (int) border.getBoundSouth());
        this.random = new LocalRandom(serverWorld.getSeed());
    }

    /**
     * Generate a new spawnpoint and return it.
     *
     * @return the generated spawnpoint coordinates.
     */
    @Override
    public Vector2i next() {
        return new Vector2i(
                random.nextBetween(lowerBounds.x, upperBounds.x),
                random.nextBetween(lowerBounds.y, upperBounds.y)
        );
    }

    /**
     * Test if a spawnpoint is valid, as in it may be generated by this generator.
     *
     * @param spawnPoint spawnpoint to test
     * @return true if the spawnpoint may be generated by this generator, false otherwise.
     */
    @Override
    public boolean isValid(Vector2i spawnPoint) {
        return (
                lowerBounds.x <= spawnPoint.x &&
                        upperBounds.x >= spawnPoint.x &&
                        lowerBounds.y <= spawnPoint.y &&
                        upperBounds.y >= spawnPoint.y
        );
    }

    /**
     * This method is ignored.
     */
    @Override
    public void add(Vector2i spawnPoint) {}

    /**
     * This method is ignored.
     */
    @Override
    public void remove(Vector2i spawnPoint) {}

    // NBTSerializable stuff
    @Override
    public NbtCompound writeNbt() {
        NbtCompound nbt = new NbtCompound();
        nbt.putInt("lowerX", lowerBounds.x);
        nbt.putInt("upperX", upperBounds.x);
        nbt.putInt("lowerZ", lowerBounds.y);
        nbt.putInt("upperZ", upperBounds.y);
        nbt.putLong("seed", ((LocalRandomAccessor) random).getSeed());
        return nbt;
    }

    @Override
    public void modifyFromNbt(NbtCompound tag) {
        lowerBounds.x = tag.getInt("lowerX");
        lowerBounds.y = tag.getInt("lowerZ");
        upperBounds.x = tag.getInt("upperX");
        upperBounds.y = tag.getInt("upperZ");

        random.setSeed(tag.getLong("seed"));
    }

    @Override
    public void modifyFromNbtPartial(NbtCompound tag) {
        if (tag.contains("lowerX", 3))
            lowerBounds.x = tag.getInt("lowerX");
        if (tag.contains("lowerZ", 3))
            lowerBounds.y = tag.getInt("lowerZ");
        if (tag.contains("upperX", 3))
            upperBounds.x = tag.getInt("upper");
        if (tag.contains("upperZ", 3))
            upperBounds.y = tag.getInt("upperZ");

        if (tag.contains("seed", 4))
            random.setSeed(tag.getLong("seed"));
    }
}
