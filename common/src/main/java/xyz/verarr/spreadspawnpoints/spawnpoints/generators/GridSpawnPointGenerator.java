package xyz.verarr.spreadspawnpoints.spawnpoints.generators;

import net.minecraft.nbt.NbtCompound;
import net.minecraft.server.world.ServerWorld;
import org.apache.commons.lang3.NotImplementedException;
import org.joml.Vector2i;
import xyz.verarr.spreadspawnpoints.spawnpoints.SpawnPointGenerator;

public class GridSpawnPointGenerator implements SpawnPointGenerator {
    public Vector2i gridSize;

    private int currentX;
    private int currentY;
    private int direction; // 0: right, 1: down, 2: left, 3: up
    private int stepsInCurrentDirection;
    private int stepsInCurrentLayer;

    public GridSpawnPointGenerator(ServerWorld serverWorld) {
        this.currentX = 0;
        this.currentY = 0;
        this.direction = 0;
        this.stepsInCurrentLayer = 1;
        this.stepsInCurrentDirection = 0;
        this.gridSize = new Vector2i(16, 16);
    }

    /**
     * Generate a new spawnpoint and return it.
     *
     * @return the generated spawnpoint coordinates.
     */
    @Override
    public Vector2i next() {
        Vector2i vector = new Vector2i(currentX, currentY).mul(gridSize);
        moveToNext();
        return vector;
    }
    private void moveToNext() {
        switch (direction) {
            case 0: // Move right
                currentX++;
                break;
            case 1: // Move down
                currentY++;
                break;
            case 2: // Move left
                currentX--;
                break;
            case 3: // Move up
                currentY--;
                break;
        }

        stepsInCurrentDirection++;

        // Check if we need to change direction
        if (stepsInCurrentDirection == stepsInCurrentLayer) {
            direction = (direction + 1) % 4; // Change direction
            stepsInCurrentDirection = 0;

            // Increase the layer size after completing two directions
            if (direction == 0 || direction == 2) {
                stepsInCurrentLayer++;
            }
        }
    }

    /**
     * Test if a spawnpoint is valid, as in it may be generated by this generator.
     *
     * @param spawnPoint spawnpoint to test
     * @return true if the spawnpoint may be generated by this generator, false otherwise.
     */
    @Override
    public boolean isValid(Vector2i spawnPoint) {
        throw new NotImplementedException();
    }

    /**
     * Internal method to add a spawnpoint to the generator. Only use this if necessary.
     * <p>
     * Implementations may ignore this method.
     *
     * @param spawnPoint spawnpoint to add
     */
    @Override
    public void add(Vector2i spawnPoint) {
        if (!isValid(spawnPoint))
            throw new IllegalArgumentException("Invalid spawnpoint given");
        throw new NotImplementedException();
    }

    /**
     * Internal method to remove a spawnpoint from the generator. Only use this if necessary.
     * <p>
     * Implementations may ignore this method.
     *
     * @param spawnPoint spawnpoint to remove
     */
    @Override
    public void remove(Vector2i spawnPoint) {
        throw new NotImplementedException();
    }

    @Override
    public NbtCompound writeNbt() {
        NbtCompound nbt = new NbtCompound();
        nbt.putInt("gridX", gridSize.x);
        nbt.putInt("gridZ", gridSize.y);

        NbtCompound state = new NbtCompound();
        state.putInt("currentX", currentX);
        state.putInt("currentZ", currentY);
        state.putInt("direction", direction);
        state.putInt("stepsInCurrentDirection", stepsInCurrentDirection);
        state.putInt("stepsInCurrentLayer", stepsInCurrentLayer);
        nbt.put("state", state);

        return nbt;
    }
    @Override
    public void modifyFromNbt(NbtCompound tag) {
        gridSize.x = tag.getInt("gridX");
        gridSize.y = tag.getInt("gridZ");

        NbtCompound state = tag.getCompound("state");
        currentX = state.getInt("currentX");
        currentY = state.getInt("currentZ");
        direction = state.getInt("direction");
        stepsInCurrentDirection = state.getInt("stepsInCurrentDirection");
        stepsInCurrentLayer = state.getInt("stepsInCurrentLayer");
    }
    @Override
    public void modifyFromNbtPartial(NbtCompound tag) {
        if (tag.contains("gridX", 3))
            gridSize.x = tag.getInt("gridX");
        if (tag.contains("gridZ", 3))
            gridSize.y = tag.getInt("gridZ");
    }
}
